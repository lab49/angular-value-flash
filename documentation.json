{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ValueFlashComponent",
            "id": "component-ValueFlashComponent-47fc1ebc8befe80576979053f4a3beef",
            "file": "projects/value-flash/src/lib/value-flash.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "value-flash",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./value-flash.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "downColor",
                    "defaultValue": "'red'",
                    "description": "<p>Color value when the component flashes &#39;down&#39;.</p>\n",
                    "line": 27
                },
                {
                    "name": "formatter",
                    "defaultValue": "'default'",
                    "description": "<p>One of the built in formatters.</p>\n",
                    "line": 32,
                    "type": "FormatterType"
                },
                {
                    "name": "formatterFn",
                    "description": "<p>Pass your own formatter function.</p>\n",
                    "line": 37,
                    "type": "Formatter"
                },
                {
                    "name": "stylePrefix",
                    "defaultValue": "'rvf_Flash'",
                    "description": "<p>Prefix for the CSS selectors in the DOM.</p>\n",
                    "line": 42
                },
                {
                    "name": "timeout",
                    "defaultValue": "200",
                    "description": "<p>Amount of time the flashed state is visible for, in milliseconds.</p>\n",
                    "line": 47
                },
                {
                    "name": "transition",
                    "description": "<p>Custom CSS transition property.</p>\n",
                    "line": 52,
                    "type": "string"
                },
                {
                    "name": "transitionLength",
                    "defaultValue": "100",
                    "description": "<p>Transition length, in milliseconds.</p>\n",
                    "line": 57
                },
                {
                    "name": "upColor",
                    "defaultValue": "'green'",
                    "description": "<p>Color value when the component flashes &#39;up&#39;.</p>\n",
                    "line": 62
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "description": "<p>Value to display. The only required prop.</p>\n",
                    "line": 67
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "animationTimeout",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "valueHolderRef",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'valueHolder'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearFlashingState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "handleValueChange",
                    "args": [
                        {
                            "name": "valueChange",
                            "type": "SimpleChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "valueChange",
                            "type": "SimpleChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChange,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { Formatter, formatters, FormatterType } from './formatters';\n\n@Component({\n  selector: 'value-flash',\n  templateUrl: './value-flash.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [],\n})\nexport class ValueFlashComponent implements OnChanges {\n  // #region Properties (11)\n\n  /**\n   * Color value when the component flashes 'down'.\n   */\n  @Input()\n  public downColor = 'red';\n  /**\n   * One of the built in formatters.\n   */\n  @Input()\n  public formatter: FormatterType = 'default';\n  /**\n   * Pass your own formatter function.\n   */\n  @Input()\n  public formatterFn?: Formatter;\n  /**\n   * Prefix for the CSS selectors in the DOM.\n   */\n  @Input()\n  public stylePrefix = 'rvf_Flash';\n  /**\n   * Amount of time the flashed state is visible for, in milliseconds.\n   */\n  @Input()\n  public timeout = 200;\n  /**\n   * Custom CSS transition property.\n   */\n  @Input()\n  public transition?: string;\n  /**\n   * Transition length, in milliseconds.\n   */\n  @Input()\n  public transitionLength = 100;\n  /**\n   * Color value when the component flashes 'up'.\n   */\n  @Input()\n  public upColor = 'green';\n  /**\n   * Value to display. The only required prop.\n   */\n  @Input()\n  public value = 0;\n  @ViewChild('valueHolder')\n  public valueHolderRef!: ElementRef<HTMLElement>;\n\n  private animationTimeout!: any;\n\n  // #endregion Properties (11)\n\n  // #region Constructors (1)\n\n  constructor() {}\n\n  // #endregion Constructors (1)\n\n  // #region Public Accessors (2)\n\n  public get formattedValue(): any {\n    return this.usedFormatter(this.value);\n  }\n\n  public get usedFormatter(): any {\n    return this.formatterFn ?? formatters[this.formatter];\n  }\n\n  // #endregion Public Accessors (2)\n\n  // #region Private Accessors (1)\n\n  private get valueHolder(): HTMLElement {\n    return this.valueHolderRef.nativeElement;\n  }\n\n  // #endregion Private Accessors (1)\n\n  // #region Public Methods (3)\n\n  public handleValueChange(valueChange: SimpleChange): void {\n    this.valueHolder.style.transition = '';\n    if (valueChange.currentValue > valueChange.previousValue) {\n      this.valueHolder.classList.add(`${this.stylePrefix}--flashing-up`);\n      this.valueHolder.style.backgroundColor = this.upColor;\n    } else if (valueChange.currentValue < valueChange.previousValue) {\n      this.valueHolder.classList.add(`${this.stylePrefix}--flashing-down`);\n      this.valueHolder.style.backgroundColor = this.downColor;\n    }\n    clearTimeout(this.animationTimeout);\n    this.animationTimeout = setTimeout(\n      () => this.clearFlashingState(),\n      this.timeout\n    );\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes.value && changes.value.previousValue !== undefined) {\n      this.handleValueChange(changes.value);\n    }\n  }\n\n  // #endregion Public Methods (3)\n\n  // #region Private Methods (1)\n\n  private clearFlashingState(): void {\n    this.valueHolder.style.transition = this.transition ?? `background-color ${this.transitionLength}ms ease-in-out`;\n    this.valueHolder.classList.remove(`${this.stylePrefix}--flashing-down`);\n    this.valueHolder.classList.remove(`${this.stylePrefix}--flashing-up`);\n    this.valueHolder.style.backgroundColor = '';\n  }\n\n  // #endregion Private Methods (1)\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 71
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "formattedValue": {
                    "name": "formattedValue",
                    "getSignature": {
                        "name": "formattedValue",
                        "type": "any",
                        "returnType": "any",
                        "line": 83
                    }
                },
                "usedFormatter": {
                    "name": "usedFormatter",
                    "getSignature": {
                        "name": "usedFormatter",
                        "type": "any",
                        "returnType": "any",
                        "line": 87
                    }
                },
                "valueHolder": {
                    "name": "valueHolder",
                    "getSignature": {
                        "name": "valueHolder",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 95
                    }
                }
            },
            "templateData": "<div #valueHolder>{{ formattedValue }}</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "ValueFlashModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ValueFlashComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ValueFlashComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/value-flash/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "currencyFormatter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/value-flash/src/lib/formatters/index.ts",
                "type": "",
                "defaultValue": "(value: number) =>\r\n  Intl.NumberFormat('en', { style: 'currency', currency: 'USD' }).format(value)"
            },
            {
                "name": "CurrencyFormatter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ValueFlash.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CustomColors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ValueFlash.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CustomTransition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ValueFlash.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ValueFlash.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultFormatter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/value-flash/src/lib/formatters/index.ts",
                "type": "",
                "defaultValue": "(value: number) => `${value}`"
            },
            {
                "name": "formatters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/value-flash/src/lib/formatters/index.ts",
                "type": "BasicFormatters",
                "defaultValue": "{\r\n  default: defaultFormatter,\r\n  // eslint-disable-next-line id-blacklist\r\n  number: numberFormatter,\r\n  currency: currencyFormatter,\r\n  percentage: percentageFormatter,\r\n}"
            },
            {
                "name": "numberFormatter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/value-flash/src/lib/formatters/index.ts",
                "type": "",
                "defaultValue": "(value: number) => Intl.NumberFormat('en').format(value)"
            },
            {
                "name": "NumberFormatter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ValueFlash.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "percentageFormatter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/value-flash/src/lib/formatters/index.ts",
                "type": "",
                "defaultValue": "(value: number) =>\r\n  Intl.NumberFormat('en', {\r\n    style: 'percent',\r\n    // See: https://github.com/microsoft/TypeScript/issues/36533\r\n    // @ts-ignore\r\n    signDisplay: 'exceptZero',\r\n  }).format(value)"
            },
            {
                "name": "PercentageFormatter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ValueFlash.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/value-flash/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ValueFlash.stories.ts",
                "type": "Story<ValueFlashComponent>",
                "defaultValue": "(args: ValueFlashComponent) => {\r\n  const { value, upColor, downColor, stylePrefix, timeout, transitionLength, transition, formatter, formatterFn } = args;\r\n  return {\r\n    props: { value, upColor, downColor, stylePrefix, timeout, transitionLength, transition, formatter, formatterFn },\r\n  };\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "BasicFormatters",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/value-flash/src/lib/formatters/index.ts",
                "description": "",
                "kind": 176
            },
            {
                "name": "Formatter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/value-flash/src/lib/formatters/index.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "FormatterType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"currency\" | \"percentage\" | \"number\" | \"default\"",
                "file": "projects/value-flash/src/lib/formatters/index.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/value-flash/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/value-flash/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/value-flash/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/value-flash/src/lib/formatters/index.ts": [
                {
                    "name": "currencyFormatter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/value-flash/src/lib/formatters/index.ts",
                    "type": "",
                    "defaultValue": "(value: number) =>\r\n  Intl.NumberFormat('en', { style: 'currency', currency: 'USD' }).format(value)"
                },
                {
                    "name": "defaultFormatter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/value-flash/src/lib/formatters/index.ts",
                    "type": "",
                    "defaultValue": "(value: number) => `${value}`"
                },
                {
                    "name": "formatters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/value-flash/src/lib/formatters/index.ts",
                    "type": "BasicFormatters",
                    "defaultValue": "{\r\n  default: defaultFormatter,\r\n  // eslint-disable-next-line id-blacklist\r\n  number: numberFormatter,\r\n  currency: currencyFormatter,\r\n  percentage: percentageFormatter,\r\n}"
                },
                {
                    "name": "numberFormatter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/value-flash/src/lib/formatters/index.ts",
                    "type": "",
                    "defaultValue": "(value: number) => Intl.NumberFormat('en').format(value)"
                },
                {
                    "name": "percentageFormatter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/value-flash/src/lib/formatters/index.ts",
                    "type": "",
                    "defaultValue": "(value: number) =>\r\n  Intl.NumberFormat('en', {\r\n    style: 'percent',\r\n    // See: https://github.com/microsoft/TypeScript/issues/36533\r\n    // @ts-ignore\r\n    signDisplay: 'exceptZero',\r\n  }).format(value)"
                }
            ],
            "stories/ValueFlash.stories.ts": [
                {
                    "name": "CurrencyFormatter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ValueFlash.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CustomColors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ValueFlash.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CustomTransition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ValueFlash.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ValueFlash.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NumberFormatter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ValueFlash.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PercentageFormatter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ValueFlash.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ValueFlash.stories.ts",
                    "type": "Story<ValueFlashComponent>",
                    "defaultValue": "(args: ValueFlashComponent) => {\r\n  const { value, upColor, downColor, stylePrefix, timeout, transitionLength, transition, formatter, formatterFn } = args;\r\n  return {\r\n    props: { value, upColor, downColor, stylePrefix, timeout, transitionLength, transition, formatter, formatterFn },\r\n  };\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/value-flash/src/lib/formatters/index.ts": [
                {
                    "name": "BasicFormatters",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/value-flash/src/lib/formatters/index.ts",
                    "description": "",
                    "kind": 176
                },
                {
                    "name": "Formatter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/value-flash/src/lib/formatters/index.ts",
                    "description": "",
                    "kind": 162
                },
                {
                    "name": "FormatterType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"currency\" | \"percentage\" | \"number\" | \"default\"",
                    "file": "projects/value-flash/src/lib/formatters/index.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "projects/value-flash/src/lib/formatters/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "currencyFormatter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/value-flash/src/lib/formatters/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultFormatter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/value-flash/src/lib/formatters/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formatters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/value-flash/src/lib/formatters/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "numberFormatter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/value-flash/src/lib/formatters/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "percentageFormatter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/value-flash/src/lib/value-flash.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ValueFlashComponent",
                "coveragePercent": 56,
                "coverageCount": "9/16",
                "status": "good"
            },
            {
                "filePath": "projects/value-flash/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/value-flash/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ValueFlash.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CurrencyFormatter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ValueFlash.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ValueFlash.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomTransition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ValueFlash.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ValueFlash.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NumberFormatter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ValueFlash.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PercentageFormatter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ValueFlash.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}